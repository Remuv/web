#package ::cortex::web

class WebSocketConnection::
    conn: word, private|local

    void send(string message)


void handler(WebSocketConnection conn) delegate
void messageHandler(WebSocketConnection conn, string message) delegate


class WebSocketServer::
    port: uint16
    onOpen: handler
    onClose: handler
    onMessage: messageHandler
    pollTimemoutMillis: uint16

    thread: word, private|local
    nextConnectionId: uint32, private|local
    exiting: bool, private|local
    server: word, private|local

    int16 construct()
    void destruct()

    void poll()
    void run() virtual




class SockJsConnection::
    conn: word, private|local

    void send(string message)


class SockJsServer::
    onMessage: handler
    onOpen: handler
    onClose: handler

    int16 construct()
    void destruct()


class DDPConnection: WebSocketConnection::
    observing: object
    expectingPong: bool
    expectingPongId: string

    eventCount: uint32, private|local

    void destruct()

    void onUpdate() observer
    void onDelete() observer

    // --------------------------------
    // Send client->server DDP messages
    // --------------------------------

    // Establishing a DDP connection
    void connected()
    void failed()
    
    // Heartbeats
    void ping(string id)
    void pong(string id)

    // Managing data
    void nosub()

    // etc


class DDPServer: WebSocketServer, implements={dispatcher}::
    events: list{event}, private|local

    bool step()

    void onMessage(DDPConnection conn, string message) method

    void post(event e)

    // ----------------------------------
    // Handle client->server DDP messages
    // ----------------------------------

    // Establishing a DDP connection
    void connect(DDPConnection conn, word json)

    // Heartbeats
    void ping(DDPConnection conn, word json)
    void pong(DDPConnection conn, word json)

    // Managing data
    void sub(DDPConnection conn, word json)
    void unsub(DDPConnection conn, word json)

    // etc



