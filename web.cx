#package ::cortex::web

string random(uint16 n)

class WebSocketConnection::
    data: object
    conn: word, private|local

    int16 construct()
    void destruct()

    void send(string message)

void handler(WebSocketConnection conn) delegate
void messageHandler(WebSocketConnection conn, string message) delegate

class WebSocketServer::
    port: uint16
    onOpen: handler
    onClose: handler
    onMessage: messageHandler
    pollTimemoutMillis: uint16

    thread: word, private|local
    nextConnectionId: uint32, private|local
    exiting: bool, private|local
    server: word, private|local
 
    int16 construct()
    void destruct()

    void poll()
    void run() virtual


class SockJsServer::
    class Connection::
        data: object
        conn: word, private|local
        void send(string msg)

    void handler(Connection conn) delegate
    void msgHandler(Connection conn, string message) delegate

    port: uint16
    onMessage: messageHandler
    onOpen: handler
    onClose: handler
    pollTimemoutMillis: uint16

    thread: word, private|local
    exiting: bool, private|local
    server: word, private|local
    timeElapsed: uint32, private|local

    int16 construct()
    void destruct()

    void poll()
    void run() virtual


class DDPServer: SockJsServer, implements={dispatcher}::
    class Session::
        observing: object
        conn: SockJsServer::Connection
        void onUpdate() observer
        void onDelete() observer
        void connected()
        void failed(SockJsServer::Connection conn) function
        void pong(string id)

    events: list{event}, private|local

    int16 construct()
    void onMessage(SockJsServer::Connection conn, string message)
    void onClose(SockJsServer::Connection conn)

    bool step()
    void post(event e)


