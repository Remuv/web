#package ::cortex::web

string random(uint16 n)

class WebSocketConnection::
    data: object
    conn: word, private|local

    void send(string message)

void handler(WebSocketConnection conn) delegate
void messageHandler(WebSocketConnection conn, string message) delegate

class WebSocketServer::
    port: uint16
    onOpen: handler
    onClose: handler
    onMessage: messageHandler
    pollTimemoutMillis: uint16

    thread: word, private|local
    exiting: bool, private|local
    server: word, private|local
 
    int16 construct()
    void destruct()

    void poll()
    void run() virtual


class SockJsServer::
    class Connection::
        data: object
        conn: word, private|local
        void send(string msg)

    struct UriRequest::
        conn: word, private|local
        void setHeader(string name, string val)
        void setStatus(uint16 status)
        void write(string msg)
        string getVar(string id)

    void handler(Connection conn) delegate
    void messageHandler(Connection conn, string msg) delegate
    void uriHandler(UriRequest conn, string uri) delegate

    port: uint16
    onMessage: messageHandler
    onOpen: handler
    onClose: handler
    onUri: uriHandler
    pollTimemoutMillis: uint16

    thread: word, private|local
    exiting: bool, private|local
    server: word, private|local
    timeElapsed: uint32, private|local
    connections: object, private|local

    int16 construct()
    void destruct()

    void poll(uint32 msec)
    void run() virtual


class DDPServer: SockJsServer, implements={dispatcher}::
    class Collection::
        obj: object
        value, meta, @scope: bool

        int16 construct()
        observer onAdded: mask=on_define|on_scope
        observer onChanged: mask=on_update|on_scope
        observer onRemoved: mask=on_delete|on_scope
        void subscribe(bool value, bool meta, bool @scope)

    class Publication::
        @scope: object
        int16 create(object session, object sub) // sub: temp workaround - dep resolver can't solve cycle

    class readyEvent: lang::event

    class Subscription::
        pub: Publication
        id: string
        value, meta, @scope: bool

        void ready()

    class Session::
        conn: SockJsServer::Connection
        collections: object, private|local
        subscriptions: object, private|local

        int16 construct()
        void connected()
        void failed(SockJsServer::Connection conn) function
        void pong(string id)
        void sub(string id, string name, bool meta, bool value, bool @scope)
        Subscription getSub(Publication pub, string id, bool meta, bool value, bool @scope)
        DDPServer::Collection getCollection(string name)

    autoPublish: bool
    events: list{event}, private|local
    sessions: object, private|local

    int16 construct()
    void onMessage(SockJsServer::Connection conn, string message)
    void onClose(SockJsServer::Connection conn)
    void onUri(SockJsServer::UriRequest conn, string uri)

    void run()
    void post(event e)
    Publication getPublication(string name)

